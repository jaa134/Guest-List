/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package partylist;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Character.isLetterOrDigit;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Jacob
 */
public class ListGUI extends javax.swing.JFrame {

    /**
     * Creates new form ListGUI
     */
    public ListGUI() {
        try {
            new File(listFileName).createNewFile();
            new File(attendedFileName).createNewFile();
            this.generatePartyList();
            this.generateAttendedList();
        }
        catch (FileNotFoundException e) {
            System.out.println(e);
        }
        catch (IOException e) {
            System.out.println(e);
        }
        initComponents();
        setupListUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchLabel = new java.awt.Label();
        addLabel = new java.awt.Label();
        searchField = new java.awt.TextField();
        submitBtn = new java.awt.Button();
        currentList = new java.awt.List();
        firstNameLabel = new java.awt.Label();
        caseIDLabel = new java.awt.Label();
        lastNameLabel = new java.awt.Label();
        invitedByLabel = new java.awt.Label();
        firstNameField = new java.awt.TextField();
        lastNameField = new java.awt.TextField();
        caseIDField = new java.awt.TextField();
        invitedByField = new java.awt.TextField();
        logBtn = new javax.swing.JButton();
        viewAllBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Party List");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(204, 204, 204));
        setSize(new java.awt.Dimension(1920, 1080));

        searchLabel.setFont(new java.awt.Font("Courier New", 1, 36)); // NOI18N
        searchLabel.setText("Search");

        addLabel.setFont(new java.awt.Font("Courier New", 1, 36)); // NOI18N
        addLabel.setText("Add");

        searchField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        searchField.setFont(new java.awt.Font("DialogInput", 0, 25)); // NOI18N
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchFieldKeyPressed(evt);
            }
        });

        submitBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        submitBtn.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        submitBtn.setLabel("GET LIT");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        currentList.setFont(new java.awt.Font("DialogInput", 0, 18)); // NOI18N
        currentList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentListMouseClicked(evt);
            }
        });

        firstNameLabel.setFont(new java.awt.Font("Courier New", 0, 20)); // NOI18N
        firstNameLabel.setText("First Name");

        caseIDLabel.setFont(new java.awt.Font("Courier New", 0, 20)); // NOI18N
        caseIDLabel.setText("Case ID");

        lastNameLabel.setFont(new java.awt.Font("Courier New", 0, 20)); // NOI18N
        lastNameLabel.setText("Last Name");

        invitedByLabel.setFont(new java.awt.Font("Courier New", 0, 20)); // NOI18N
        invitedByLabel.setText("Invited By");

        firstNameField.setFont(new java.awt.Font("DialogInput", 0, 25)); // NOI18N

        lastNameField.setFont(new java.awt.Font("DialogInput", 0, 25)); // NOI18N

        caseIDField.setFont(new java.awt.Font("DialogInput", 0, 25)); // NOI18N

        invitedByField.setFont(new java.awt.Font("DialogInput", 0, 25)); // NOI18N

        logBtn.setFont(new java.awt.Font("Courier New", 0, 22)); // NOI18N
        logBtn.setText("Log In");
        logBtn.setEnabled(false);
        logBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logBtnActionPerformed(evt);
            }
        });

        viewAllBtn.setFont(new java.awt.Font("Courier New", 0, 22)); // NOI18N
        viewAllBtn.setText("View All");
        viewAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(logBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(viewAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(searchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(searchField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(caseIDField, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                                    .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(caseIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(firstNameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(invitedByLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lastNameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(invitedByField, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                        .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(caseIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(caseIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(invitedByLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(invitedByField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(40, 40, 40)
                        .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(viewAllBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(logBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        searchLabel.getAccessibleContext().setAccessibleName("SearchLabel");
        searchLabel.getAccessibleContext().setAccessibleDescription("");
        submitBtn.getAccessibleContext().setAccessibleName("submitBtn");
        caseIDLabel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        resetErrorOnAddTextFields();
        if(verifyAgainstFlawedData()) {
            try {
                addEntry();
            }
            catch (IOException e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_submitBtnActionPerformed

    private void viewAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllBtnActionPerformed
        resetSearch();
        currentList.removeAll();
        setupListUI();
    }//GEN-LAST:event_viewAllBtnActionPerformed

    private void currentListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentListMouseClicked
        String personName = currentList.getSelectedItem();
        if (personName != null && personName.length() > 0) {
            logBtn.setEnabled(true);
        }
    }//GEN-LAST:event_currentListMouseClicked

    private void logBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logBtnActionPerformed
        String personName = currentList.getSelectedItem();
        LinkedList<String> personData = new LinkedList<>(Arrays.asList(personName.split(",")));
        String dateAttended = new SimpleDateFormat("dd-M-yyyy hh:mm:ss a").format(new Date());
        personData.add(dateAttended);
        attendedList.add(personData);
        try (FileWriter fw = new FileWriter(attendedFileName,true)) {
            fw.write(personData.get(0) + "," + personData.get(1) + "," + personData.get(2) + "\n");
        } catch (IOException e) {
            System.out.println(e);
        }
        currentList.deselect(currentList.getSelectedIndex());
        resetSearch();
        currentList.removeAll();
        setupListUI();
    }//GEN-LAST:event_logBtnActionPerformed

    private void searchFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyPressed
        String keyPressed = Character.isLetterOrDigit(evt.getKeyChar()) ? Character.toString(evt.getKeyChar()) : "";
        HashSet<List<String>> possibleIdentities = new HashSet<>();
        String searchText = searchField.getText() + keyPressed;
        if (evt.getKeyChar() == 8) {
            searchText = searchText.substring(0, searchText.length()-1);
        }
        for (List<String> person : partyList) {
            for(int i = 0; i < 3; i++) {
                if(person.get(i).toLowerCase().contains(searchText.toLowerCase())) {
                    possibleIdentities.add(person);
                }
            }
        }
        currentList.removeAll();
        if (possibleIdentities.isEmpty()) {
            logBtn.setEnabled(false);
            searchLabel.setForeground(Color.RED);
            searchField.setForeground(Color.RED);
        }
        else {
            logBtn.setEnabled(true);
            searchLabel.setForeground(Color.BLACK);
            searchField.setForeground(Color.BLACK);
            setupListUI(possibleIdentities);
        }
    }//GEN-LAST:event_searchFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ListGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label addLabel;
    private java.awt.TextField caseIDField;
    private java.awt.Label caseIDLabel;
    private java.awt.List currentList;
    private java.awt.TextField firstNameField;
    private java.awt.Label firstNameLabel;
    private java.awt.TextField invitedByField;
    private java.awt.Label invitedByLabel;
    private java.awt.TextField lastNameField;
    private java.awt.Label lastNameLabel;
    private javax.swing.JButton logBtn;
    private java.awt.TextField searchField;
    private java.awt.Label searchLabel;
    private java.awt.Button submitBtn;
    private javax.swing.JButton viewAllBtn;
    // End of variables declaration//GEN-END:variables
    private List<List<String>> partyList;
    private List<List<String>> attendedList;
    private String listFileName = "list.csv";
    private String attendedFileName = "attended.csv";
    
    
    private void generatePartyList() throws FileNotFoundException, IOException {
        LinkedList<List<String>> listFromFile = new LinkedList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(listFileName))) {
            String line;
            LinkedList<String> personInfo;
            while ((line = br.readLine()) != null) {
                //split the csv in seperate values
                personInfo = new LinkedList<>(Arrays.asList(line.split(",")));
                listFromFile.add(personInfo);
            }
            br.close();
        }
        this.partyList = listFromFile;
    }
    
    private void generateAttendedList() throws FileNotFoundException, IOException {
        LinkedList<List<String>> listFromFile = new LinkedList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(attendedFileName))) {
            String line;
            LinkedList<String> personInfo;
            while ((line = br.readLine()) != null) {
                //split the csv in seperate values
                personInfo = new LinkedList<>(Arrays.asList(line.split(",")));
                listFromFile.add(personInfo);
            }
            br.close();
        }
        this.attendedList = listFromFile;
    }
    
    private void setupListUI() {
        partyList.stream().forEach((person) -> {
            currentList.add(getForamlNameFromCSVData(person));
        });
    }
    
    private void setupListUI(HashSet<List<String>> potentialGuests) {
        potentialGuests.stream().forEach((List<String> person) -> {
            currentList.add(getForamlNameFromCSVData(person));
        });
    }
    
    private String getForamlNameFromCSVData(List<String> person) {
            return person.get(1) + ", " + person.get(0);
    }
    
    private boolean verifyAgainstFlawedData() {
        boolean isIntegrityHeld = true;
        if(firstNameField.getText().isEmpty() || firstNameField.getText().contains(",")) {
            firstNameField.setForeground(Color.RED);
            firstNameLabel.setForeground(Color.RED);
            isIntegrityHeld = false;
        }
        if(lastNameField.getText().isEmpty() || lastNameField.getText().contains(",")) {
            lastNameField.setForeground(Color.RED);
            lastNameLabel.setForeground(Color.RED);
            isIntegrityHeld = false;
        }
        if(caseIDField.getText().isEmpty() || caseIDField.getText().contains(",")) {
            caseIDField.setForeground(Color.RED);
            caseIDLabel.setForeground(Color.RED);
            isIntegrityHeld = false;
        }
        if(invitedByField.getText().isEmpty() || invitedByField.getText().contains(",")) {
            invitedByField.setForeground(Color.RED);
            invitedByLabel.setForeground(Color.RED);
            isIntegrityHeld = false;
        }
        return isIntegrityHeld;
    }
    
    private void resetErrorOnAddTextFields() {
        firstNameField.setForeground(Color.BLACK);
        firstNameLabel.setForeground(Color.BLACK);
        lastNameField.setForeground(Color.BLACK);
        lastNameLabel.setForeground(Color.BLACK);
        caseIDField.setForeground(Color.BLACK);
        caseIDLabel.setForeground(Color.BLACK);
        invitedByField.setForeground(Color.BLACK);
        invitedByLabel.setForeground(Color.BLACK);
    }
    
    private void clearAddTextFields() {
        firstNameField.setText("");
        lastNameField.setText("");
        caseIDField.setText("");
        invitedByField.setText("");
    }
    
    private void resetSearch() {
        logBtn.setEnabled(false);
        searchLabel.setForeground(Color.BLACK);
        searchField.setForeground(Color.BLACK);
        searchField.setText("");
    }
    
    private void addEntry() throws IOException {
        String firstName = firstNameField.getText();
        String lastName = lastNameField.getText();
        String caseID = caseIDField.getText();
        String invitedBy = invitedByField.getText();
        String date = new SimpleDateFormat("dd-M-yyyy hh:mm:ss").format(new Date());
        String[] personArray = {firstName, lastName, caseID, invitedBy, date};
        partyList.add(new LinkedList<>(Arrays.asList(personArray)));
        String data = firstName + "," + lastName + "," + caseID + "," + invitedBy + "," + date + "\n";
        try (FileWriter fw = new FileWriter(listFileName,true)) {
            fw.write(data);
        }
        clearAddTextFields();
        resetSearch();
        currentList.removeAll();
        setupListUI();
    }
}
